16. Ключи и индексы
При создании таблиц особое внимание надо уделить первичному ключевому полю (PK), которое однозначно идентифицирует каждую запись, а также механизмам оптимизации, обеспечивающим ускоренный доступ к записям.

16.1. Уникальные поля и первичные ключи

Ключевое слово UNIQUE, которое ставится после типа поля, накладывает на это поле требование уникальности значений.

Уникальное поле -- это поле, в котором все значения в таблице должны быть неповторяющимися.

Уникальные поля часто играют роль первичного ключа. Первичный ключ можно определить в таблице явно с помощью конструкции PRIMARY KEY. Эта конструкция, как и UNIQUE, требует неповторяемости значений поля. Однако она может быть задана только для одного поля, выбранного в качестве первичного ключа. А ключевое слово UNIQUE может использоваться в команде создания таблицы неоднократно.

Например, при создании таблицы Region обязательно надо указать, какое поле будет первичным ключом:

USE MyTest;
CREATE TABLE Region (
	RegionID int PRIMARY KEY,
	RegionDescription nchar(50) NOT NULL
	);
Прим. Синтаксис задания первичного ключа может отличаться в зависимости от диалекта SQL конкретной СУБД.

Однако если мы теперь попробуем вставить в эту таблицу новую запись, рассчитывая, что RegionID получит какое-то значение по умолчанию:

INSERT INTO Region (RegionDescription)
VALUES ('12345');
то появится ошибка:

Cannot insert the value NULL into column 'RegionID', table 'Region'; 
column does not allow nulls.
Особенность первичного ключа в том, что он не допускает ни повторяющихся, ни нулевых полей. Однако будет очень неудобно каждый раз вручную указывать какой-то уникальный идентификатор для PK-поля RegionID, особенно если добавляется множество записей.

Практически всеми СУБД поддерживаются так называемые auto-increment поля, значения которых формируются автоматически при добавлении новой записи. Синтаксис описания таких полей обычно отличается в разных системах. В Microsoft SQL Server соответствующему полю надо задать свойство IDENTITY с двумя значениями, первое из которых -- начальное, а второе -- шаг приращения. Например:

CREATE TABLE Region (
	RegionID int IDENTITY(1,3) PRIMARY KEY,
	RegionDescription nchar(50) NOT NULL
	);
Теперь при добавлении записей в таблицу Region первая автоматически получит в поле RegionID значение 1, вторая -- значение 4, третья -- значение 7, и т. д.

16.2. Создание индексов

Индексация (индексирование) таблиц -- это технология, которая существенно (на порядки) ускоряет выборку нужных записей из таблицы. Для этого применяются самые разные алгоритмы, от хэш-таблиц до двоичных деревьев. По значению, например, ключевого поля мы можем очень быстро, буквально единичными операциями добраться до конкретной записи, вместо того чтобы выполнять перебор всей таблицы. Однако индексирование замедляет другие операции -- добавления, модификации и удаления записей. Тем не менее в реляционных системах индексы используются очень активно, и как минимум их надо задавать для первичных ключей, хотя они обычно формируются для PK по умолчанию, автоматически.

Работа с индексами сильно зависит от конкретной СУБД, поэтому и синтаксис соответствующих команд может различаться. Мы рассматриваем в данном разделе диалект SQL для Microsoft SQL Server.

Создание индексов для конкретных полей таблицы выполняется командой CREATE INDEX:

CREATE INDEX имя-индекса ON имя-таблицы (имя-поля)
Имя индекса нужно для того, чтобы впоследствии его можно было уничтожить. Существующий индекс удаляют командой DROP:

DROP INDEX имя-индекса ON имя-таблицы
Кроме того, если часто выполняются запросы SELECT к неключевым полям, для них тоже очень полезно создать индекс. Более того, некоторые поля могут быть связаны друг с другом логически -- это например ContactTitle и ContactName из таблицы Customers. Если мы постоянно выполняем запросы и фильтрации по этим двум полям одновременно, можно создать единый ключ сразу на два поля -- он будет вычисляться по двойному значению одновременно:

CREATE INDEX idxContactTitleAndName ON Customers (ContactTitle, ContactName)
16.3. Кластерные индексы



Некоторые индексы в этом примере (для PK-поля) помечены как кластерные. Это означает, что таблица хранится в упорядоченном виде, по значению ключа этого индекса, что дополнительно повышает эффективность её обработки. Если ключевое поле представляет собой автоматически увеличивающийся счётчик, то лучше делать его кластерным.
Кластерный индекс создаётся так:

CREATE CLUSTERED INDEX имя-индекса ON имя-таблицы (имя-поля)
Кластерный индекс для таблицы может быть только один.

Задание. Добавьте подходящие индексы для таблиц тестовой базы, созданной в предыдущем занятии.