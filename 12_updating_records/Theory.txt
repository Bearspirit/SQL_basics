12. Обновление записей
Команды SQL позволяют не только отбирать и фильтровать содержимое таблиц, но и модифицировать их содержимое. Для этого предназначена группа так называемых команд обновления.

12.1. Добавление новой записи

Команда INSERT добавляет в таблицу новую запись:

INSERT INTO имя-таблицы
VALUES ( значение-первого-поля, значение-второго-поля, ... ) ;
В списке значений представлены значения полей новой записи, следующие в порядке полей.

После имени таблицы можно дополнительно указать в скобках список названий конкретных полей. Полям, которые не указаны в этом списке, будут присвоены значения по умолчанию.

Например, добавим нового пользователя:

INSERT INTO Customers (CompanyName, ContactName, Address, City, PostalCode, Country)
VALUES ('GazProm', 'Petya Ivanov', 'Main 33/7 21', ' Piter', '140060', 'Russia');
Правильно спроектированная база данных в качестве PK (первичных ключей) обычно задействует числовые поля с автоматическим увеличением значения -- как например таблица Orders, где PK OrderID целое число. Мы работаем с учебной базой, где в качестве PK таблицы Customers используется уникальный текстовый идентификатор из пяти символов, который создаётся вручную. Поэтому данная команда добавления приведёт к ошибке:

Cannot insert the value NULL into column 'CustomerID', 
table 'northwind.dbo.Customers';
column does not allow nulls.
Так как мы явно не указали поле CustomerID, сервер пытается записать в него значение NULL -- но для данного ключевого поля нулевые значения как раз запрещены.

Посмотрим, как сработает команда вставки данных в таблицу, в которой поле PK формируется автоматически. Например, таблица категорий товаров Categories содержит четыре поля CategoryID, CategoryName, Description и Picture, из которых мы укажем только два (название категории и дополнительное описание).

INSERT INTO Categories (CategoryName, Description) 
VALUES ('Gaz', 'Gaz from Russia'); 
Данная форма сработает отлично, по умолчанию оставив поле изображения пустым, и теперь нам в случае с таблицей пользователей просто надо придумать и явно добавить уникальный идентификатор:

INSERT INTO Customers (CustomerID, CompanyName, ContactName, Address, City, PostalCode, Country) 
VALUES ('GPPET', 'GazProm', 'Petya Ivanov', 'Main 33/7 21', ' Piter', '140060', 'Russia'); 
12.2. Потенциальные проблемы INSERT

Команда INSERT срабатывает, как мы видим, не всегда. Особый проблемный случай, который необходимо учитывать, связан с тем, что обычно в рабочей базе данных сформировано множество взаимосвязей между таблицами. Добавление новой записи без учета этих связей (попытка ввода неверного FK-ключа) может привести к нарушению ссылочной целостности.

Например, попробуем добавить в табличку территорий Territories новую запись. В этой таблице есть FK-связь с регионом (таблица Region) по полю RegionID, а самих регионов в тестовой базе всего четыре. Мы можем без проблем добавить новую территорию для существующего восточного региона:

INSERT INTO Territories (TerritoryID, TerritoryDescription, RegionID)
VALUES ('125007', 'Piter', 1);
Тут мы вручную указываем PK-ключ, потому что он не генерируется автоматически, а задаёт конкретную территорию по официальному классификатору.

Однако если мы попробуем указать несуществующий FK-ключ 5 на таблицу Region:

INSERT INTO Territories (TerritoryID, TerritoryDescription, RegionID)
VALUES ('125007', 'Piter', 5);
возникнет ошибка

The INSERT statement conflicted with the FOREIGN KEY 
constraint "FK_Territories_Region". 
12.3. Задания

12.3.1. Добавьте нового пользователя в таблицу Employees.

12.3.2. Свяжите этого нового пользователя с какой-либо территорией с помощью таблицы EmployeeTerritories (многие-ко-многим).

12.3.3. Попробуйте добавить новую запись в таблицу заказов Orders. Возникнут ли какие-либо конфликты?

Решение задания 11
11.5.1. Отберите с помощью LEFT JOIN все записи из таблицы Customers, для которых FK-ключ таблицы Orders пустой.
SELECT * FROM Customers LEFT JOIN Orders
  ON Orders.CustomerID = Customers.CustomerID
  WHERE Orders.CustomerID IS NULL
11.5.2. Выведите конкретную информацию по всем пользователям Customers и поставщикам Suppliers -- имя контактной персоны, город и страну, а также идентификацию группы (пользователь или поставщик).
SELECT 'Customer' As Type, ContactName, City, Country FROM Customers 
UNION 
SELECT 'Supplier' As Type, ContactName, City, Country FROM Suppliers 
ORDER BY Type