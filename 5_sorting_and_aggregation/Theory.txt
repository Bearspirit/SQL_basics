5. Сортировка и агрегирование
5.1. Сортировка

В абсолютном большинстве случаев требуется получать наборы данных в виде, отсортированном по одному из столбцов.

Сортировка набора -- это упорядочение записей набора по значению определенного поля, в порядке возрастания или убывания.

Если итоговый набор требуется отсортировать по значению определенного поля, следует воспользоваться предложением ORDER BY. После этих ключевых слов указывается поле, по которому выполняется сортировка. По умолчанию сортировка выполняется по возрастанию. Если требуется выполнить сортировку по убыванию, после имени поля надо добавить ключевое слово DESC.

Например:

SELECT *  FROM Orders ORDER BY OrderDate DESC;
Будут показаны все заказы в порядке от самого нового до самого старого (по убыванию даты).

Сортировка заказчиков по имени-фамилии контактного лица запишется так:

SELECT * FROM Customers ORDER BY ContactName;
Выходной набор будет упорядочен по алфавиту имени-фамилии заказчика.

Если для упорядочения задано несколько полей, выполняется многоуровневая сортировка. Записи сначала сортируются по первому указанному полю, при совпадении значений выполняется сортировка во следующему полю и так далее. Например:

SELECT * FROM Customers ORDER BY Country, ContactName;
Результирующий набор будет упорядочен по полю Country. Записи с одинаковыми названиями стран дополнительно сортируются по имени.

5.2. Проверка неопределенных полей

В таблицах нередко встречаются поля с неопределенными значениями. Их содержимое нельзя явно сравнивать с помощью вышеописанных операций. Единственное допустимое в отношении таких полей действие -- проверка на неопределенность. Она выполняется командой IS NULL. Например:

SELECT * FROM Customers 
WHERE Region IS NULL
ORDER BY Country, ContactName;
В результирующий набор попадут записи, у которых значение поля Region не определено.

5.3. Агрегирование

Функции агрегирования обрабатывают все значения столбца (поля) таблицы базы данных. Они позволяют получить обобщенные, итоговые результаты.

Агрегирование -- это класс операций, разово выполняемых над всеми записями набора данных.

5.3.1. Типовые операции агрегирования

Пусть, например, требуется посчитать, сколько всего единиц товара у нас хранится на складе. Это поле UnitsInStock таблицы Products.

Функция SUM определяет сумму всех значений заданного поля. Имя нужного поля указывается в качестве параметра SUM():

SELECT SUM(UnitsInStock) FROM Products;
Такая команда вернет не набор записей, а значение агрегированной функции SUM для всего набора. В данном примере оно равно 3119 (в зависимости от версии базы данных Northwind).

К часто применяемым функциям агрегирования относятся функции AVG (вычисление среднего значения), MIN и MAX (поиск минимального и максимального значений).

5.3.2. Подсчёт количества значений

Функция COUNT вообще не обрабатывает значения поля, а просто считает количество значений данного поля в таблице, не учитывая нулевые и неопределенные. Например:

SELECT COUNT(RegionId) FROM Region;
В таблице будет обнаружено 4 значения. Если требуется узнать общее число записей в таблице, вместо имени поля можно поставить символ *.

5.3.3. Уточнение работы функций

Работу функции COUNT можно уточнять с помощью дополнительных предложений. Пусть надо подчитать число уникальных значений в определенном столбце (без учета повторяющихся значений). Перед параметром функции (именем поля) в круглых скобках дополнительно ставится ключевое слово DISTINCT:

SELECT COUNT(DISTINCT ContactType) FROM Contacts;
С учетом повторений в таблице обнаруживается 4 значения, при том, что всего в таблице 133 значения.

Предикат DISTINCT можно применять и в других функциях агрегирования, например в функции SUM. Нередко требуется, чтобы функция работала, учитывая все поля, как с повторяющимися, так и с неповторяющимися значениями. Это важно, например, при подсчете бюджета -- у разных отделов могут быть одинаковые бюджеты. В такой ситуации вместо DISTINCT используют ключевое слово ALL, прямо противоположное DISTINCT по смыслу.

5.4. Задания

5.4.1. Отсортируйте список сотрудников Employees по дате рождения, начиная с самых молодых, и по стране.

5.4.2. Исключите из предыдущего набора те записи, в которых поле Region равно NULL.

5.4.3. Найдите среднюю, минимальную и максимальную цены по полю UnitPrice из таблицы Order Details.

5.4.4. Подсчитайте количество уникальных городов в списке пользователей (Customers).

Решение задания 4
4.3.1. Найдите всех пользователей (Customers), фамилия контактной персоны которых (ContactName) начинается с C.
SELECT * FROM Customers
WHERE ContactName LIKE 'C%'
Более корректным даже будет скорее такой вариант (если нужно именно имя, а не фамилия):

SELECT * FROM Customers
WHERE ContactName LIKE '% C%'
4.3.2. Найдите все заказы, плата за груз у которых (Freight) лежит в диапазоне от 100 до 200, а страна-поставщик ShipCountry -- либо USA, либо France.
SELECT * FROM Orders
WHERE (Freight BETWEEN 100 AND 200) AND
      (ShipCountry IN ('France','USA'))
4.3.3. Отфильтруйте таблицу EmployeeTerritories, задающую отношение многие-ко-многим между сотрудниками и территориальными подразделениями, так, чтобы значение связующего поля TerritoryID находилось в промежутке от 6897 до 31000.
SELECT * FROM EmployeeTerritories
WHERE TerritoryID BETWEEN 6897 AND 31000 