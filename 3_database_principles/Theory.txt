3. Принципы работы с базами данных
3.1. Краткое содержание предыдущего занятия

Мы работаем с учебной базой данных northwind -- это реляционная база данных, или набор двумерных таблиц, состоящих из столбцов (называемых также полями) и строк (называемых записями). По столбцам (полям), хранящим значения определенных типов, организуется единая структура всех записей в одной таблице.

Между таблицами можно формировать логические взаимосвязи. СУБД обеспечивает целостность связанных данных, запрещая некорректные смысловые модификации связанных записей.

В каждой таблице должно быть поле, по которому можно однозначно идентифицировать каждую запись. Такое поле называют первичный ключ (PK). Значение первичного ключа в каждой записи должно быть уникальным. Подчас в качестве первичного ключа используется обычный числовой счетчик. Формирование первичного ключа обычно возлагается на СУБД, и прикладной проектировщик базы данных не задается проблемой его создания.

Кроме того, в записях могут быть и так называемые внешние ключи (FK), которые "указывают" на записи из других таблиц, храня соответствующие первичные ключи, и тем самым задают логические взаимосвязи между таблицами.

СУБД -- это весьма мощная программная система, которая берёт на себя множество технических моментов, связанных с целостностью, защищённостью, быстродействием и масштабированием базы данных. Прикладному разработчику требуется только научиться извлекать из базы данных нужную информацию.

3.2. Клиент-серверная архитектура

Чаще всего СУБД используются в так называемой клиент-серверной архитектуре, когда логика обработки базы данных явно отделена от прикладной логики (взаимодействие с пользователем, решение прикладных задач).

Например, мы хотим предоставить пользователю удобный графический интерфейс -- настольную программу для Windows, которая будет обращаться к базе данных, отбирать из неё различные сведения для отчётов, добавлять новые сведения, и т. д. Такая архитектура организуется следующим образом: имеется выделенный сервер обработки баз данных, который работает на собственной машине в сети и независим от местонахождения клиентских компьютеров. Этот сервер следит за сохранностью базы данных, обрабатывает запросы, обеспечивает транзакционную работу, реализует блокировку на уровне записи или даже ее отдельного поля и устойчиво функционирует при наличии миллионов клиентских обращений. Он снимает с пользовательских машин нагрузку, связанную с обработкой баз данных, разграничивает доступ пользователей и программ к данным, скрывая отдельные таблицы и их отдельные поля и ограничивая возможность их модификации и так далее.

Драйвер СУБД выполняет в этом случае функции связи прикладной программы с сервером баз данных. Клиентское приложение реагирует на действия пользователя, выполняет необходимую счетную работу, но наборы данных полностью получает от СУБД, которая обрабатывает запросы SQL на своём удаленном компьютере.

3.3. Structured Query Language (SQL)

Обработка данных непосредственно в самой СУБД выполняется с помощью языка структурированных запросов к базам данных Structured Query Language (SQL). Он позволяет одной командой отобрать подмножества записей из одной или нескольких таблиц по заданному критерию отбора, сортировать содержимое таблиц и выполнять другие действия по фильтрации и модификации содержимого таблиц. SQL также может добавлять, модифицировать и удалять отдельные записи или целые таблицы, и т. д.

Язык SQL был разработан в корпорации IBM в середине 1970-х годов, с тех пор вышел ряд стандартов, и практически все современные СУБД поддерживают стандартную версию SQL и обычно дополняют её своими расширениями. Но 99% всех потребностей удовлетворяет стандартная версия SQL, поэтому мы будем ориентироваться именно на неё. Кроме того, SQL по сути не зависит от СУБД, и однократно изучив этот язык запросов, вы сможете переносить этот навык на любые другие реляционные системы.

3.4. Штатное средство для работы с командами SQL

В SSMS входит готовое средство, позволяющее в интерактивном режиме вводить команды языка SQL, запускать их на исполнение и тут же получать результат работы. Для этого вам надо нажать на панели кнопок New Query, и в центральном окне откроется редактор для ввода команд SQL. Для выполнения команды следует нажать кнопку Execute. Результат работы команды -- временный набор данных -- представляется в нижнем окне.

Давайте введём пробную команду и посмотрим на результат:

SELECT * FROM CUSTOMERS;


Эта команда отбирает все записи из таблицы Customers.

3.5. Запись команд SQL

Язык SQL обычно используют не для создания законченных программ, а для записи отдельных выражений, формирующих конкретный набор данных. Эти выражения задействуются программами на разных языках для запросов к СУБД и получения от них наборов данных.

Среди выражений SQL имеются команды и сообщения.

Команда, или оператор SQL — это инструкция для СУБД на выполнение заданных действий в базе данных.
Сообщение SQL информирует СУБД об определенном событии в клиентской программе.
Выражения SQL записываются с помощью букв латинского алфавита, цифр и специальных знаков. Они состоят из ключевых слов, пользовательских идентификаторов и констант. Команды почти всегда начинаются с ключевого слова и по нему именуются, например команда SELECT.
Стандарт ANSI требует, чтобы при записи команд SQL использовались только прописные буквы. Однако это правило соблюдается редко, и практически все реализации SQL позволяют записывать команды и идентификаторы в любом регистре (как в Microsoft SQL Server). Например, следующие команды идентичны:

SELECT
select
Select
Однако рекомендуется придерживаться практики записи команд SQL прописными буквами.

Команды SQL состоят из нескольких логически законченных частей. Например, команда отбора записей может содержать часть, задающую таблицу и набор полей для анализа, и часть, определяющую условие отбора записей в результирующий набор. Такие элементы команд SQL называют предложениями SQL. Предложение, как и команду SQL, обычно называют по ключевому слову, с которого оно начинается.

3.6. Логические выражения SQL

Язык SQL допускает использование в предложениях логических выражений -- выражений, которые вычисляют логическое значение.

В логическом выражении SQL можно использовать операции сравнения (<, >, <=, >=, =, <> (не равно)), круглые скобки и операции AND (логическое И), OR (логическое ИЛИ) и NOT (логическое отрицание). Схема построения таких выражений аналогична схеме построения логических выражений в обычных языках программирования.

Язык SQL позволяет сравнивать числовые, символьные и строковые значения. В последнем случае алгоритм выявления отношения между символами надо выяснять из документации к конкретной СУБД, или проверять опытным путем. В зависимости от используемой кодировки (особенно русскоязычной), сравнение одних и тех же символов может давать разные результаты.

3.7. Отбор записей с помощью команды SELECT

Наиболее популярной и наиболее часто используемой командой языка SQL счи тается команда SELECT. Она предназначена для отбора группы записей из одной или нескольких таблиц и позволяет задать условие отбора.

В общем случае эта команда записывается следующим образом:

SELECT список-полей FROM имя-таблицы;
Список полей представляет собой набор приведенных через запятую полей указанной таблицы, значения которых включаются в результирующий набор.

Наша учебная база данных содержит таблицу Customers (Клиенты). Команда:

SELECT CompanyName, Phone FROM Customers;
сформирует набор из всех записей, каждая из которых содержит два поля: CompanyName и Phone.

Часто необходимо отобрать записи таблицы целиком, не отбрасывая никаких полей. Тогда вместо списка полей в выражении SQL задают символ *, обозначающий выбор всех полей -- мы уже вводили такую команду в самом начале.

3.8. Фильтрация записей

На значения полей в результирующем наборе данных можно накладывать ограничения. Для этого после имени таблицы надо поставить ключевое слово WHERE, за которым следует логическое выражение SQL. В результате в итоговый набор попадут лишь те записи, для которых это выражение истинно.

Фильтрация записей -- это отбор записей из таблицы по определенному условию.

Команды фильтрации записывается следующим образом:

SELECT список-полей FROM имя-таблицы WHERE условие;
Пусть, например, требуется отобрать список заказов, для которых значение поля Freight (плата за груз) больше значения 100, а регион доставки (ShipRegion) -- 'RJ'. Для этого надо выполнить следующую команду SQL:

SELECT * FROM Orders 
WHERE (Freight > 100) AND (ShipRegion = 'RJ');


3.9. Задания
3.9.1. Напишите запрос, формирующий полный список товаров (Products) и выводящий название товара и количество единиц на складе.
3.9.2. Напишите запрос, формирующий список товаров (Products) и выводящий название товара и цену для тех товаров, которые дешевле 20.
3.9.3. Выведите список заказов, у которых плата за груз лежит в диапазоне от 11.7 до 98.1.
3.9.4. Отберите всех сотрудников (Employees) - мужчин (анализируйте поле TitleOfCourtesy).
3.9.5. Отберите всех поставщиков (Suppliers) из Японии.
3.9.6. Отберите все заказы, для которых идентификатор сотрудника-исполнителя равен 2, 4 или 8.
3.9.7. Выведите идентификаторы заказов и товаров из таблицы Order Details, для которых цена больше 40, а количество (Quantity) меньше 10.

Решение задания 2
Связи в БД

Таблица 1	Тип связи	                                Таблица2
Employees	многие ко многим(через EmployeeTerritories)	Territories
Orders	        многие ко многим(через OrderDetails)	        Products
Customers	один ко многим	                                Orders
Employees	один ко многим	                                Orders
Shippers	один ко многим	                                Orders
Suppliers	один ко многим	                                Products
Categories	один ко многим                                  Products
Regions	        один ко многим                                  Territories