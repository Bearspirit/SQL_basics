2. Реляционые базы данных
Для успешной работы с базами данных необходим определённый теоретический минимум.

2.1. Общие понятия
База данных -- это совокупность данных, которые определенным образом организованы и связаны друг с другом. Способ этой организации и связи называется моделью базы данных.

Таблица базы данных -- это набор записей фиксированной структуры, где каждая запись описывает определенный информационный объект.

Таблица состоит из строк, представляющих записи, и столбцов, представляющих именованные поля — элементы структуры записей таблицы.

Система управления базами данных (СУБД) -- это программная система, предназначенная для обработки баз данных.

Работа с данными происходит не на физическом уровне, а на абстрактном логическом уровне полей, упорядоченных записей и взаимосвязанных таблиц, для которых не существен конкретный механизм реализации системы. СУБД поддерживают ссылки между записями таблиц -- это их ключевая отличительная особенность от файлов.

2.2. Реляционная модель данных Кодда
Модель базы данных, состоящей из таблиц упомянутой структуры, называется реляционной. Практически все ведущие производители СУБД поддерживают именно эту модель баз данных. Реляционная модель хороша тем, что проста в работе и эксплуатации.

Реляционная модель базы данных определяется 12 правилами Кодда.

В реляционной модели доступ к каждой записи выполняется быстро за счет системы индексов. Явная взаимосвязь между индексами и записями в таблицах может быть задана и эффективно реализована с помощью ключевых полей.

2.3. Нормализация баз данных
Модель Кодда позволяет добиться непротиворечивости хранимой информации, элементы которой связаны между собой, а также избежать ее дублирования. Это обеспечивается с помощью так называемой нормализации.

Нормализация базы данных -- это формальная технология, позволяющая преобразовать базу данных к одной из нормальных схем (или нормальных форм, сокращенно записываемых как NF).

Нормальная схема -- это совокупность требований к организации взаимосвязанных реляционных таблиц, обеспечивающая минимальную избыточность информации в базе данных.

Первичный ключ -- это элемент данных, уникальный для каждой записи и однозначно ее идентифицирующий.

Первая нормальная форма (1NF) предполагает требование, согласно которому в записях данных должны быть выделены первичные ключи и исключено дублирование. Это достигается распределением информации по разным таблицам.

Вторая нормальная форма (2NF) дополнительно предполагает требование, согласно которому все без исключения вторичные значения в записях должны полностью зависеть от первичного ключа.

Третья нормальная форма (3NF) подразумевает, что и сами вторичные значения взаимно независимы.

Общая идея создания базы данных из набора таблиц подразумевает разделение (расщепление) таблиц таким образом, чтобы автономная в смысловом плане информация хранилась в отдельной таблице, обычно называемой справочником. Если, например, имеется набор данных по заказам, каждая запись которого содержит наборы полей по клиенту и по исполнителю, то, очевидно, большой объем сведений дублируется. Ведь сведения как об одном клиенте, так и об одном исполнителе могут многократно повторяться в разных комбинациях. Если потребуется модифицировать описание клиента, придется найти и откорректировать все записи, в которых он упомянут.

Для устранения избыточности следует создать два новых справочника: один по клиентам, другой по исполнителям. Описание заказов ведется в отдельной таблице. В нее помимо прямой информации о заказе (дата, сумма, товар) включаются первичные ключи (уникальные идентификаторы) соответствующих записей о клиенте и исполнителе. При этом любая модификация их описаний подразумевает внесение изменений лишь в один справочник -- таблица заказов останется неизменной. Когда же потребуется подробная информация о заказе, детальные сведения о клиенте и исполнителе будут динамически извлечены из соответствующих справочников на основании их ключей.



В системах, где каждая таблица насчитывает несколько десятков полей, вторая нормальная форма обеспечивает удовлетворительную производительность. Однако если объем информации велик, то внутри понятия, представленного схемой таблицы, обычно существуют дополнительные взаимосвязи. Если, например, полное имя клиента состоит из трех полей: Имя, Фамилия и Отчество, -- их можно, в свою очередь, вынести в отдельную таблицу. В исходной таблице вместо трех текстовых полей потребуется ввести одно, хранящее значение первичного ключа из таблицы с именами. При полном разделении таких вторичных полей получается третья нормальная форма. Этот процесс также во многом интуитивен и подразумевает выделение смысловых элементов во вторичных данных.

2.4. Отношения между таблицами
Важная характеристика базы данных -- так называемая степень связи. Она определяет, в каком количественном отношении связи находятся две сущности. Например, каждый клиент может иметь только один заказ.

Тогда в таблицу клиентов достаточно добавить одно поле, хранящее первичный ключ записи в таблице заказов (такой ключ называется внешним). В таком случае отношения между двумя сущностями (таблицей клиента и таблицей заказа) называется отношением один-к-одному -- каждому значению одной таблицы соответствует ровно одно значение другой таблицы.

На практике гораздо чаще встречается отношение один-ко-многим. Например, один клиент может иметь много заказов, но каждый заказ сделан только одним клиентом. Тогда приходится создавать минимум две таблицы. Одна содержит описания заказов и включает поле для значения первичного ключа клиента (значения в этом поле могут повторяться), а вторая хранит описания клиентов.

Если подразумевается партнерство, в котором у клиента может быть несколько исполнителей его требований, а у исполнителя — несколько клиентов, придется создавать три таблицы. Две из них представляют собой справочники по клиентам и исполнителям, а третья хранит пары ключей "клиент -- исполнитель". При этом в ней допускается повторение значений в любом из столбцов. Такое соотношение называется многие-ко-многим.



Обычно первичный ключ обозначается PK (Primary Key), а внешний ключ -- FK (Foreign Key). Взаимосвязи между таблицами базы northwind можно выявить, заглянув в раздел Keys каждой таблицы. Там указаны как первичные ключи, начинающиеся с префикса PK_ , так и вторичные, начинающиеся с префикса FK_ .

2.5. Задание
Разберитесь во взаимосвязях между таблицами northwind и опишите их (один-к-одному, один-ко-многим и многие-ко-многим).

Решение занятия 1
- Categories – категории товаров с подробным содержанием этих категорий;
- Contacts – контакты клиентов/заказчиков, сотрудников и поставщиков;
- Customers – данные о клиентах/заказчиках;
- Employees – данные о сотрудниках;
- Products – данные о товарах;
- Suppliers – данные о поставщиках;
- Shippers – Данные о доставщиках (службах доставки, грузоотправителях);
- Region – данные о регионах;
- Territories – данные о территориальных единицах регионов, городах;
- Orders – данные о заказах;
- Order Details – детали заказов;
- EmployeeTerritories - какой сотрудник к какой территории прикреплён.